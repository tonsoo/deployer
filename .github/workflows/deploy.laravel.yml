name: Deploy
on:
  workflow_call:
    inputs:
      add-to-deploys:
        type: boolean
        default: false
      repo:
        type: string
        required: true
        description: "Your repository name"
      domain:
        type: string
        required: true
        description: "The fully qualified domain name, such as 'example.com'"
      sub-domain:
        type: string
        required: false
        default: dev
        description: "The subdomain separator, must be separated by '.', such as 'dev' or 'dev.test' or 'dev.test.subdomain'"
      app-name:
        type: string
        required: true
        description: "Your app project name that'll be used as the project name for the docker compose containers"
    secrets:
      DB_PASSWORD:
        required: true
        description: "Your database password for development environment"
      SSH_HOST:
        required: true
        description: "Your ssh host for server connection"
      SSH_PRIVATE_KEY:
        required: true
        description: "Your ssh private key for accessing server"
      SSH_USER:
        required: true
        description: "Your ssh username for server connection"
      DEPLOY_PATH:
        required: true
        description: "Your server absolute deploy path, without forwas slash, such as '/var/www/my-app'"

permissions:
  contents: read
  deployments: write

jobs:
  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repo }}

    - name: Set deployment env variables
      id: set-env-vars
      run: |
        BRANCH_NAME=$(echo "${{ github.ref_name }}" | tr '/' '-')
        BASE_DOMAIN="${{ inputs.domain }}"

        if [ "$BRANCH_NAME" = "main" ]; then
          DOMAIN="$BASE_DOMAIN"
          APP_ENV="production"
          APP_DEBUG=false
        else
          DOMAIN="${BRANCH_NAME}.$BASE_DOMAIN"
          APP_ENV="dev"
          APP_DEBUG=true
        fi

        echo "DOMAIN=$DOMAIN" >> $GITHUB_ENV
        echo "APP_ENV=$APP_ENV" >> $GITHUB_ENV
        echo "APP_DEBUG=$APP_DEBUG" >> $GITHUB_ENV
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        echo "APP_DOCKER_NAME=${{ inputs.app-name }}-$BRANCH_NAME" >> $GITHUB_ENV
        echo "DEPLOY_DIR=${{ secrets.DEPLOY_PATH }}/$BRANCH_NAME" >> $GITHUB_ENV

    - name: Setup node
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install node dependencies
      run: |
        npm install
        npm run build

    - name: Setup ssh
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add ssh host
      run: |
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

    - name: Downlod deployer.sh
      run: curl -fsSL https://raw.githubusercontent.com/tonsoo/deployer/refs/heads/main/app/deploy.sh

    - name: Rsync files
      run: |
        rsync -avz --delete \
          --exclude='storage' \
          --exclude='.env' \
          --exclude='vendor' \
          --exclude='node_modules' \
          --exclude='.git' \
          --exclude='*.log' \
          --exclude='.DS_Store' \
          ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ env.DEPLOY_DIR }}

    - name: Post-deploy hml
      if: env.APP_ENV == 'dev'
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
        set -e

        cd "${{ env.DEPLOY_DIR }}"
        cp "${{ secrets.DEPLOY_PATH }}/.secrets/.env.hml" .env
        cp docker-compose.hml.yml docker-compose.yml

        sed -i "s|{{BRANCH_NAME}}|${{ env.BRANCH_NAME }}|g" .env docker-compose.yml
        sed -i "s|{{DOMAIN}}|${{ env.DOMAIN }}|g" .env docker-compose.yml
        sed -i "s|{{PMA_DOMAIN}}|pma.${{ env.DOMAIN }}|g" .env docker-compose.yml
        sed -i "s|{{SESSION_COOKIE}}|hml_pinheiro_psicologia_${{ env.BRANCH_NAME }}_session|g" .env docker-compose.yml
        sed -i "s|{{APP_URL}}|https://${{ env.DOMAIN }}|g" .env docker-compose.yml
        sed -i "s|{{ASSET_URL}}|https://${{ env.DOMAIN }}|g" .env docker-compose.yml
        sed -i "s|{{APP_ENV}}|${{ env.APP_ENV }}|g" .env docker-compose.yml
        sed -i "s|{{APP_DEBUG}}|${{ env.APP_DEBUG }}|g" .env docker-compose.yml
        sed -i "s|{{DB_PASSWORD}}|${{ secrets.DB_PASSWORD }}|g" .env docker-compose.yml
        sed -i "s|{{APP_DOCKER_NAME}}|${{ env.APP_DOCKER_NAME }}|g" docker-compose.yml
        sed -i "s|{{DATABASE_PERSIST_PATH}}|${{ secrets.DEPLOY_PATH }}/.secrets/databases/hml-${{ env.BRANCH_NAME }}-mysql-data|g" .env docker-compose.yml

        mkdir -p bootstrap/cache storage/framework/{cache,sessions,views} storage/logs
        chmod -R 775 bootstrap/cache storage

        curl -fsSL -o deploy.sh https://raw.githubusercontent.com/tonsoo/deployer/refs/heads/main/app/deploy.sh
        source deploy.sh "${{ env.APP_DOCKER_NAME }}"
        rm deploy.sh
        EOF
        
    - name: Post-deploy prod
      if: env.APP_ENV == 'production'
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
        set -e

        cd "${{ env.DEPLOY_DIR }}"
        cp "${{ secrets.DEPLOY_PATH }}/.secrets/.env" .env
        cp docker-compose.prod.yml docker-compose.yml

        sed -i "s|{{BRANCH_NAME}}|${{ env.BRANCH_NAME }}|g" .env docker-compose.yml
        sed -i "s|{{DOMAIN}}|${{ env.DOMAIN }}|g" .env docker-compose.yml
        sed -i "s|{{APP_URL}}|https://${{ env.DOMAIN }}|g" .env docker-compose.yml
        sed -i "s|{{ASSET_URL}}|https://${{ env.DOMAIN }}|g" .env docker-compose.yml
        sed -i "s|{{APP_ENV}}|${{ env.APP_ENV }}|g" .env docker-compose.yml
        sed -i "s|{{APP_DEBUG}}|${{ env.APP_DEBUG }}|g" .env docker-compose.yml
        sed -i "s|{{STORAGE_PATH}}|${{ secrets.DEPLOY_PATH }}/.secrets/storage|g" .env docker-compose.yml
        sed -i "s|{{APP_DOCKER_NAME}}|${{ env.APP_DOCKER_NAME }}|g" docker-compose.yml

        mkdir -p bootstrap/cache ${{ secrets.DEPLOY_PATH }}/.secrets/storage/framework/{cache,sessions,views} ${{ inputs.DEPLOY_PATH }}/.secrets/storage/logs
        chmod -R 775 bootstrap/cache ${{ secrets.DEPLOY_PATH }}/.secrets/storage

        curl -fsSL -o deploy.sh https://raw.githubusercontent.com/tonsoo/deployer/refs/heads/main/app/deploy.sh
        source deploy.sh "${{ env.APP_DOCKER_NAME }}"
        rm deploy.sh
        EOF

    - name: Set deployment URL on GitHub
      if: ${{ success() && env.BRANCH_NAME != 'main' && inputs.add-to-deploys }}
      uses: actions/github-script@v7
      with:
        script: |
          const branch = process.env.BRANCH_NAME;
          const domain = process.env.DOMAIN;
          const environment = branch;
          const envUrl = `https://${domain}`;
          const logUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.ref,
            environment: environment,
            auto_merge: false,
            required_contexts: []
          });

          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            environment_url: envUrl,
            log_url: logUrl,
            description: `Preview for '${branch}' available at: ${envUrl}`
          });